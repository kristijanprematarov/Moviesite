// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Moviesite.Data;

namespace Moviesite.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210403212318_fixedGenreSeed")]
    partial class fixedGenreSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Moviesite.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Australia",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 447, DateTimeKind.Local).AddTicks(1405),
                            Gender = "Male",
                            Name = "Chris Hemsworth"
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(1990),
                            Gender = "Male",
                            Name = "Robert Downey Jr."
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2043),
                            Gender = "Male",
                            Name = "Chris Evans"
                        },
                        new
                        {
                            Id = 4,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2050),
                            Gender = "Female",
                            Name = "Scarlett Johansson"
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2054),
                            Gender = "Male",
                            Name = "Mark Ruffalo"
                        },
                        new
                        {
                            Id = 6,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2058),
                            Gender = "Male",
                            Name = "Jeremy Lee Renner"
                        },
                        new
                        {
                            Id = 7,
                            Country = "England",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2061),
                            Gender = "Male",
                            Name = "Tom Hiddleston"
                        },
                        new
                        {
                            Id = 8,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2065),
                            Gender = "Male",
                            Name = "Robert Clark Gregg"
                        },
                        new
                        {
                            Id = 9,
                            Country = "Canada",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2069),
                            Gender = "Female",
                            Name = "Cobie Smulders"
                        },
                        new
                        {
                            Id = 10,
                            Country = "Sweden",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2072),
                            Gender = "Male",
                            Name = "Stellan John Skarsgard"
                        },
                        new
                        {
                            Id = 11,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2075),
                            Gender = "Male",
                            Name = "Samuel L. Jackson"
                        },
                        new
                        {
                            Id = 12,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2079),
                            Gender = "Female",
                            Name = "Karen Gillan"
                        },
                        new
                        {
                            Id = 13,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2084),
                            Gender = "Female",
                            Name = "Brie Larson"
                        },
                        new
                        {
                            Id = 14,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2087),
                            Gender = "Male",
                            Name = "Jon Favreau"
                        },
                        new
                        {
                            Id = 15,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2091),
                            Gender = "Male",
                            Name = "Bradley Cooper"
                        },
                        new
                        {
                            Id = 16,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 451, DateTimeKind.Local).AddTicks(2094),
                            Gender = "Male",
                            Name = "Josh Brolin"
                        });
                });

            modelBuilder.Entity("Moviesite.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(2882),
                            Gender = "Male",
                            Name = "Christopher Nolan",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4154),
                            Gender = "Male",
                            Name = "Steven Spielberg",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4190),
                            Gender = "Male",
                            Name = "Spike Lee",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 4,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4194),
                            Gender = "Male",
                            Name = "Quentin Tarantino",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4198),
                            Gender = "Male",
                            Name = "Irwin Winkler",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 6,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4201),
                            Gender = "Male",
                            Name = "Martin Scorsese",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 7,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4204),
                            Gender = "Male",
                            Name = "Tim Burton",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 8,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4207),
                            Gender = "Male",
                            Name = "Kevin Feige",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 9,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4211),
                            Gender = "Male",
                            Name = "Jason Blum",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 10,
                            Country = "Canada",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4214),
                            Gender = "Male",
                            Name = "James Cameron",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 11,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(4217),
                            Gender = "Male",
                            Name = "George Lucas",
                            ShortDescription = ""
                        });
                });

            modelBuilder.Entity("Moviesite.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 8,
                            Name = "General"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Uncategorised"
                        });
                });

            modelBuilder.Entity("Moviesite.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActorNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<string>("DirectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormatType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProducerID")
                        .HasColumnType("int");

                    b.Property<string>("ProducerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Shipping")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SoldItems")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(350)")
                        .HasMaxLength(350);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectorID");

                    b.HasIndex("GenreID");

                    b.HasIndex("ProducerID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Moviesite.Entities.MovieActor", b =>
                {
                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("ActorID")
                        .HasColumnType("int");

                    b.HasKey("MovieID", "ActorID");

                    b.HasIndex("ActorID");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("Moviesite.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovieCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieFormatType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieProducer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Moviesite.Entities.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 452, DateTimeKind.Local).AddTicks(9266),
                            Gender = "Male",
                            Name = "Michael Mann",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(528),
                            Gender = "Male",
                            Name = "Steven Spielberg",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(559),
                            Gender = "Male",
                            Name = "Spike Lee",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 4,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(563),
                            Gender = "Male",
                            Name = "Quentin Tarantino",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(566),
                            Gender = "Male",
                            Name = "Irwin Winkler",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 6,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(570),
                            Gender = "Female",
                            Name = "Kathleen Kennedy",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 7,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(573),
                            Gender = "Female",
                            Name = "Nina Jacobson",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 8,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(577),
                            Gender = "Male",
                            Name = "Kevin Feige",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 9,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(582),
                            Gender = "Male",
                            Name = "Jason Blum",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 10,
                            Country = "Canada",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(586),
                            Gender = "Male",
                            Name = "James Cameron",
                            ShortDescription = ""
                        },
                        new
                        {
                            Id = 11,
                            Country = "USA",
                            DateBirth = new DateTime(2021, 4, 3, 23, 23, 17, 453, DateTimeKind.Local).AddTicks(589),
                            Gender = "Male",
                            Name = "George Lucas",
                            ShortDescription = ""
                        });
                });

            modelBuilder.Entity("Moviesite.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Moviesite.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moviesite.Entities.Movie", b =>
                {
                    b.HasOne("Moviesite.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moviesite.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moviesite.Entities.Producer", "Producer")
                        .WithMany("Movies")
                        .HasForeignKey("ProducerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moviesite.Entities.MovieActor", b =>
                {
                    b.HasOne("Moviesite.Entities.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moviesite.Entities.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
